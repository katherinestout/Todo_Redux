{"version":3,"sources":["Todos.js","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todos","_ref","todos","deleteTodo","todoList","length","map","todo","react_default","a","createElement","className","key","id","onClick","content","AddTodo","state","handleChange","e","_this","setState","target","value","handleSubmit","preventDefault","props","addTodo","onSubmit","this","type","onChange","Component","App","filter","Math","random","Object","toConsumableArray","concat","src_Todos","src_AddTodo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAiCeA,EA3BD,SAAAC,GAAyB,IAAvBC,EAAuBD,EAAvBC,MAAOC,EAAgBF,EAAhBE,WAKbC,EAAWF,EAAMG,OAGnBH,EAAMI,IAAI,SAAAC,GAEN,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,kBAAkBC,IAAKL,EAAKM,IAC7CL,EAAAC,EAAAC,cAAA,QAAMI,QAAS,WAAOX,EAAWI,EAAKM,MACrCN,EAAKQ,YAKdP,EAAAC,EAAAC,cAAA,yCAEJ,OACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAW,oBACXP,ICUEY,6MAnCXC,MAAQ,CACJF,QAAS,MAKbG,aAAe,SAACC,GACbC,EAAKC,SAAS,CACVN,QAASI,EAAEG,OAAOC,WAGzBC,aAAe,SAACL,GAEZA,EAAEM,iBAEHL,EAAKM,MAAMC,QAAQP,EAAKH,OAExBG,EAAKC,SAAS,CACVN,QAAS,8EAKZ,OACIP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMkB,SAAYC,KAAKL,cACvBhB,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,SAAOoB,KAAM,OAAOC,SAAUF,KAAKX,aACnCK,MAAQM,KAAKZ,MAAMF,mBA7BbiB,aCuDPC,6MAlDbhB,MAAQ,CACNf,MAAO,CACL,CAACW,GAAI,EAAGE,QAAS,iBACjB,CAACF,GAAI,EAAGE,QAAS,yBAOrBZ,WAAa,SAACU,GAGZ,IAAMX,EAAQkB,EAAKH,MAAMf,MAAMgC,OAAO,SAAA3B,GACpC,OAAOA,EAAKM,KAAOA,IAErBO,EAAKC,SAAS,CACZnB,aAOJyB,QAAU,SAACpB,GACPA,EAAKM,GAAKsB,KAAKC,SAGf,IAAIlC,EAAKmC,OAAAC,EAAA,EAAAD,CAAOjB,EAAKH,MAAMf,OAAlBqC,OAAA,CAAyBhC,IAClCa,EAAKC,SAAS,CACZnB,MAAOA,6EAMX,OACEM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAd,UACAH,EAAAC,EAAAC,cAAC8B,EAAD,CAAOtC,MAAS2B,KAAKZ,MAAMf,MACvBC,WAAc0B,KAAK1B,aACvBK,EAAAC,EAAAC,cAAC+B,EAAD,CAASd,QAAWE,KAAKF,kBA1CjBK,aCMEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f07837ef.chunk.js","sourcesContent":["import React from 'react';\n\n\n//functional component\n//where we will render the todos and will pass it into App.js\n//since we passed the todos prop (same concept for deleteTodo) to Todos in App.js, we can access those todos here\nconst Todos = ({todos, deleteTodo}) => {\n\n//map through the todoList, and return each item in the list\n//passing todos as a prop\n//turnery operator: if we have todos, or if we dont have any todos\n    const todoList = todos.length ? (\n        //grab each todo and fire the function on each todo item\n        //have to give each todo a unique id (key) \n        todos.map(todo => {\n//add an onClick event to span with the deleteTodo, based on id, automatically fires function\n            return(\n                <div className = \"collection-item\" key={todo.id}>\n                <span onClick={() => {deleteTodo(todo.id)}}>\n                {todo.content}</span>\n                </div>\n            )\n        })\n    ) : (\n        <p> You've nothing left to do! </p>\n    )\n    return(\n        <div className= \"todos-collection\">\n            {todoList}\n        </div>\n    )\n}\n\nexport default Todos;","import React, {Component} from 'react';\n\nclass AddTodo extends Component {\n    state = {\n        content: ''\n    }\n//handeler functions:\n\n//set state so that content matches state, so it is insynch with input\n    handleChange = (e) => {\n       this.setState({\n           content: e.target.value\n       })\n    }\n    handleSubmit = (e) => {\n        //prevent default action of refreshing page\n        e.preventDefault();\n       //passing content into this function\n       this.props.addTodo(this.state);\n       //clearing the input, resetting the state..adding value to input\n       this.setState({\n           content: ''\n       })\n    }\n\n    render(){\n        return (\n            <div>\n                <form onSubmit = {this.handleSubmit}>\n                <label>Add new Todo:</label>\n                <input type =\"text\" onChange={this.handleChange} \n                value ={this.state.content}/>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default AddTodo;","import React, { Component } from 'react';\nimport Todos from './Todos';\nimport AddTodo from './AddTodo';\n\n//store the todos in the state of App component\n//This is some dummy data, each has a property \"content\"\nclass App extends Component {\n  state = {\n    todos: [\n      {id: 1, content: 'Learn Angular'},\n      {id: 2, content: 'Read Harry Potter'}\n    ]\n  }\n\n\n  //delete functionality\n  //takes an id as parameter, can then access this also in Todos.js\n  deleteTodo = (id) => {\n  //if this todo id is not equal to that id in that array then return true\n  //if they are equal than it is going to filter it out/delete it\n    const todos = this.state.todos.filter(todo => {\n      return todo.id !== id\n    });\n    this.setState({\n      todos\n    })\n  }\n\n\n  //add a new todo to the list/ array\n  //generate a random number for each id\n  addTodo = (todo) => {\n      todo.id = Math.random();\n    //create a new array, and then dumping each item in old array... \n    //into this array use spread operator to get each item and empty them in array todos\n      let todos = [...this.state.todos, todo];\n      this.setState({\n        todos: todos\n      })\n\n  }\n\n  render() {\n    return (\n      <div className=\"todo-app container\">\n          <h1 className=\"center blue-text\">Todo's</h1>\n          <Todos todos = {this.state.todos} \n              deleteTodo = {this.deleteTodo}/>\n          <AddTodo addTodo = {this.addTodo}/>\n      </div>\n    );\n  }\n}\n\n//passing Todos the todos prop so you can access the property using {this.state.todos}\n//passed addTodo into AddTodo so you can access it in the handlesubmit in the AddTodos.js\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}